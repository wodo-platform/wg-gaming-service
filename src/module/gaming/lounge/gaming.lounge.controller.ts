import { GamingLounge } from '@prisma/client';
import { Get, Post, Body, Put, Delete, Param, Query, Controller, HttpCode,ParseIntPipe, ParseBoolPipe, UsePipes } from '@nestjs/common';
import { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags, ApiParam, ApiBody } from '@nestjs/swagger';
import { GamingLoungeService } from './gaming.lounge.service';
import GamingLoungeCreateDto from '../../../dto/gaming/lounge/gaming.lounge.create.dto';
import GamingLoungeUpdateDto from '../../../dto/gaming/lounge/gaming.lounge.update.dto.ts';
import { GamingLoungeType } from '@wodo-platform/wg-shared-lib/dist/wodogaming/lounge/gaming.lounge.type';
import { GamingLoungeState } from '@wodo-platform/wg-shared-lib/dist/wodogaming/lounge/gaming.lounge.state';
import { ValidationPipe } from '../../../common/pipes/validation.pipe';
import { VALIDATION_SCHEMA_GAMING_LOUNGE_CREATE, VALIDATION_SCHEMA_GAMING_LOUNGE_UPDATE } from '../../../common/pipes/validation';


@ApiBearerAuth()
@ApiTags('gaming-lounges')
@Controller('gaming-lounges')
export class GamingLoungeController { 

  constructor(private readonly gamingLoungeService: GamingLoungeService) {}

  @ApiOperation({ summary: 'Create gaming lounge' })
  @ApiResponse({ status: 201, description: 'The gaming lounge has been successfully created.' })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Post()
  async create(@Body(new ValidationPipe(VALIDATION_SCHEMA_GAMING_LOUNGE_CREATE)) gamingLoungeCreateDto: GamingLoungeCreateDto) {
    return await this.gamingLoungeService.create(gamingLoungeCreateDto);
  }

  @ApiOperation({ summary: 'Update gaming lounge' })
  @ApiResponse({ status: 201, description: 'The gaming lounge has been successfully updated.' })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Put()
  async update(@Body(new ValidationPipe(VALIDATION_SCHEMA_GAMING_LOUNGE_UPDATE)) gamingLoungeUpdateDto: GamingLoungeUpdateDto) {
    return await this.gamingLoungeService.update(gamingLoungeUpdateDto);
  }

  @ApiOperation({ summary: 'Find all gaming lounges' })
  @ApiResponse({ status: 200, description: 'Return all gaming lounges.'})
  @Get('')
  async findAll(): Promise<GamingLounge[]> {
    return await this.gamingLoungeService.findAll(null,null);
  }

  @ApiOperation({ summary: 'Find all demos by the given query string params.' })
  @ApiResponse({ status: 200, description: 'Return all demos.'})
  @Get('filter')
  async findByQueryParam(@Query('desc') desc: string,@Query('deleted',ParseBoolPipe) deleted: boolean): Promise<GamingLounge[]> {
    return await this.gamingLoungeService.findAll(null,null);
  }


  @ApiOperation({ summary: 'Find demo by id.' })
  @ApiParam({ name: "id", description: "Unique numeric demo id generated by the system for the demo entities.", required: false, allowEmptyValue: false })
  @ApiResponse({ status: 200, description: 'Return demo found by the given id.' })
  @Get(':id')
  async findById(@Param('id', ParseIntPipe) id: number): Promise<GamingLounge> {
    return await this.gamingLoungeService.findById(id);
  }

  @HttpCode(204)
  @ApiOperation({ summary: 'Delete demo' })
  @ApiResponse({ status: 204, description: 'The demo has been successfully deleted.'})
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Delete(':id')
  async delete(@Param('id', ParseIntPipe) id: number) {
    return await this.gamingLoungeService.delete(id);
  }

  @HttpCode(204)
  @ApiOperation({ summary: 'Purge gaming lounge' })
  @ApiResponse({ status: 204, description: 'The gaming lounge has been successfully purged.'})
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Delete('purge/:id')
  async purge(@Param('id', ParseIntPipe) id: number): Promise<GamingLounge> {
    return await this.gamingLoungeService.purge(id);
  }
}