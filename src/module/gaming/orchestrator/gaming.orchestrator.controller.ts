import { Get, Post, Body, Put, Delete, Param, Query, Controller, HttpCode,ParseIntPipe, ParseBoolPipe } from '@nestjs/common';
import { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags, ApiParam } from '@nestjs/swagger';
import GamingOrchestratorCreateDto from '../../../dto/gaming/orchestrator/gaming.orchestrator.create.dto';
import GamingOrchestratorUpdateDto from '../../../dto/gaming/orchestrator/gaming.orchestrator.update.dto';
import { GamingOrchestratorService } from './gaming.orchestrator.service'


@ApiBearerAuth()
@ApiTags('gaming-orchestrator')
@Controller('gaming-orchestrator')
export class GamingOrchestratorController {
  constructor(private readonly gamingOrchestratorService: GamingOrchestratorService) {}

  @ApiOperation({ summary: 'Create demo' })
  @ApiResponse({ status: 201, description: 'The demo has been successfully created.' })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Post()
  async create(@Body() gamingOrchestratorCreateDto: GamingOrchestratorCreateDto) {
    return await this.gamingOrchestratorService.create(gamingOrchestratorCreateDto);
  }

  @ApiOperation({ summary: 'Update demo' })
  @ApiResponse({ status: 201, description: 'The demo has been successfully updated.' })
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Put()
  async update(@Body() gamingOrchestratorUpdateDto: GamingOrchestratorUpdateDto) {
    return await this.gamingOrchestratorService.create(gamingOrchestratorUpdateDto);
  }

  /** @ApiOperation({ summary: 'Find all demos' })
  @ApiResponse({ status: 200, description: 'Return all demos.'})
  @Get('')
  async findAll(): Promise<Demo[]> {
    return await this.demoService.findAll(null,null);
  }

  @ApiOperation({ summary: 'Find all demos by the given query string params.' })
  @ApiResponse({ status: 200, description: 'Return all demos.'})
  @Get('filter')
  async findByQueryParam(@Query('desc') desc: string,@Query('deleted',ParseBoolPipe) deleted: boolean): Promise<Demo[]> {
    return await this.demoService.findAll(null,null);
  }


  @ApiOperation({ summary: 'Find demo by id.' })
  @ApiParam({ name: "id", description: "Unique numeric demo id generated by the system for the demo entities.", required: false, allowEmptyValue: false })
  @ApiResponse({ status: 200, description: 'Return demo found by the given id.' })
  @Get(':id')
  async findById(@Param('id', ParseIntPipe) id: number): Promise<Demo> {
    return await this.demoService.findById(id);
  }

  @HttpCode(204)
  @ApiOperation({ summary: 'Delete demo' })
  @ApiResponse({ status: 204, description: 'The demo has been successfully deleted.'})
  @ApiResponse({ status: 403, description: 'Forbidden.' })
  @Delete(':id')
  async delete(@Param() params) {
    return this.demoService.delete(params.id);
  } */

}